3. Code Files
src/api/api.js (Mock API calls)
const books = [
  { id: 1, title: "Learn React", author: "John Doe", category: "Education", rating: 4.5, free: true },
  { id: 2, title: "Business 101", author: "Jane Smith", category: "Business", rating: 4.0, free: false },
  { id: 3, title: "Financial Freedom", author: "Rich Guy", category: "Financial", rating: 5, free: false },
  { id: 4, title: "Top Rated Book", author: "Star Author", category: "Education", rating: 5, free: true },
  // Add more books as needed
];

export const fetchBooks = (category = null, freeOnly = false) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      let filtered = books;
      if (category) filtered = filtered.filter(b => b.category === category);
      if (freeOnly) filtered = filtered.filter(b => b.free === true);
      resolve(filtered);
    }, 500);
  });
};

export const login = ({ email, password }) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (email === "user@example.com" && password === "password") {
        resolve({ token: "mock-token", user: { email } });
      } else {
        reject("Invalid credentials");
      }
    }, 500);
  });
};

export const signup = ({ email, password }) => {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve({ token: "mock-token", user: { email } });
    }, 500);
  });
};

src/context/AuthContext.jsx
import React, { createContext, useState, useEffect } from "react";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    const storedUser = localStorage.getItem("user");
    return storedUser ? JSON.parse(storedUser) : null;
  });

  const login = (userData) => {
    setUser(userData);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

src/components/ProtectedRoute.jsx
import React, { useContext } from "react";
import { Navigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

const ProtectedRoute = ({ children }) => {
  const { user } = useContext(AuthContext);
  if (!user) {
    return <Navigate to="/signin" replace />;
  }
  return children;
};

export default ProtectedRoute;

src/components/Landing/Home.jsx
import React from "react";

const Home = () => {
  return (
    <div className="landing-container">
      <section className="hero-section" style={{ background: "linear-gradient(135deg, #4e54c8, #8f94fb)", color: "#fff", padding: "4rem", borderRadius: "12px", marginBottom: "2rem" }}>
        <h1>Welcome to the E-Book Library</h1>
        <p>Discover thousands of books across categories. Sign in to start reading now!</p>
      </section>
      <section>
        <h2>Featured Books</h2>
        <p>Coming soon...</p>
      </section>
    </div>
  );
};

export default Home;

src/components/Landing/About.jsx
import React from "react";

const About = () => (
  <div style={{ padding: "2rem" }}>
    <h1>About Our E-Book Platform</h1>
    <p>
      We offer a vast collection of e-books across multiple categories to help you
      learn, grow, and succeed.
    </p>
  </div>
);

export default About;

src/components/Landing/Contact.jsx
import React, { useState } from "react";

const Contact = () => {
  const [form, setForm] = useState({ name: "", email: "", message: "" });

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert("Message sent! We will get back to you soon.");
    setForm({ name: "", email: "", message: "" });
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h1>Contact Us</h1>
      <form onSubmit={handleSubmit} style={{ maxWidth: "400px" }}>
        <input type="text" name="name" placeholder="Your Name" value={form.name} onChange={handleChange} required style={{ width: "100%", marginBottom: "0.5rem", padding: "0.5rem" }} />
        <input type="email" name="email" placeholder="Your Email" value={form.email} onChange={handleChange} required style={{ width: "100%", marginBottom: "0.5rem", padding: "0.5rem" }} />
        <textarea name="message" placeholder="Your Message" value={form.message} onChange={handleChange} required style={{ width: "100%", marginBottom: "0.5rem", padding: "0.5rem" }} />
        <button type="submit" style={{ backgroundColor: "#ff6e7f", color: "#fff", border: "none", padding: "0.75rem 1.5rem", borderRadius: "8px", cursor: "pointer" }}>Send</button>
      </form>
    </div>
  );
};

export default Contact;

src/components/Auth/SignIn.jsx
import React, { useState, useContext } from "react";
import { login as loginAPI } from "../../api/api";
import { AuthContext } from "../../context/AuthContext";
import { useNavigate, Link } from "react-router-dom";

const SignIn = () => {
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const [form, setForm] = useState({ email: "", password: "" });
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      const res = await loginAPI(form);
      login(res.user);
      navigate("/dashboard");
    } catch (err) {
      setError(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <h2>Sign In</h2>
      <form onSubmit={handleSubmit} className="auth-form">
        <input type="email" name="email" placeholder="Email" value={form.email} onChange={handleChange} required />
        <input type="password" name="password" placeholder="Password" value={form.password} onChange={handleChange} required />
        {error && <p className="error">{error}</p>}
        <button type="submit" disabled={loading} style={{ backgroundColor: "#ff6e7f", color: "white" }}>
          {loading ? "Signing in..." : "Sign In"}
        </button>
      </form>
      <p>
        Don't have an account? <Link to="/signup">Sign Up</Link>
      </p>
    </div>
  );
};

export default SignIn;

src/components/Auth/SignUp.jsx
import React, { useState, useContext } from "react";
import { signup as signupAPI } from "../../api/api";
import { AuthContext } from "../../context/AuthContext";
import { useNavigate, Link } from "react-router-dom";

const SignUp = () => {
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();

  const [form, setForm] = useState({ email: "", password: "" });
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const res = await signupAPI(form);
      login(res.user);
      navigate("/dashboard");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="auth-container">
      <h2>Sign Up</h2>
      <form onSubmit={handleSubmit} className="auth-form">
        <input type="email" name="email" placeholder="Email" value={form.email} onChange={handleChange} required />
        <input type="password" name="password" placeholder="Password" value={form.password} onChange={handleChange} required />
        <button type="submit" disabled={loading} style={{ backgroundColor: "#ff6e7f", color: "white" }}>
          {loading ? "Signing up..." : "Sign Up"}
        </button>
      </form>
      <p>
        Already have an account? <Link to="/signin">Sign In</Link>
      </p>
    </div>
  );
};

export default SignUp;

src/components/Dashboard/Sidebar.jsx
import React from "react";

const categories = [
  { id: "free", label: "Free Books" },
  { id: "topRated", label: "Top Rated" },
  { id: "business", label: "Business" },
  { id: "education", label: "Education" },
  { id: "financial", label: "Financial" },
];

const Sidebar = ({ selectedCategory, setSelectedCategory }) => {
  return (
    <aside className="sidebar">
      <h2>E-Books</h2>
      <nav>
        <ul>
          {categories.map(cat => (
            <li
              key={cat.id}
              className={selectedCategory === cat.id ? "active" : ""}
              onClick={() => setSelectedCategory(cat.id)}
              style={{ cursor: "pointer", padding: "10px 0" }}
            >
              {cat.label}
            </li>
          ))}
        </ul>
      </nav>
    </aside>
  );
};

export default Sidebar;

src/components/Dashboard/TopBar.jsx
import React from "react";

const TopBar = ({ cartCount, wishlistCount, bookmarksCount }) => {
  return (
    <div className="topbar">
      <div className="topbar-icons">
        <div className="icon-with-badge">
          🛒
          {cartCount > 0 && <span className="badge">{cartCount}</span>}
        </div>
        <div className="icon-with-badge">
          ❤️
          {wishlistCount > 0 && <span className="badge">{wishlistCount}</span>}
        </div>
        <div className="icon-with-badge">
          📑
          {bookmarksCount > 0 && <span className="badge">{bookmarksCount}</span>}
        </div>
      </div>
    </div>
  );
};

export default TopBar;

src/components/Dashboard/BookCard.jsx
import React from "react";

const BookCard = ({ book, onAddToCart, onAddToWishlist, onAddToBookmark }) => {
  return (
    <div className="book-card">
      <div className="book-cover" style={{ backgroundColor: "#ddd", height: "180px", borderRadius: "8px", marginBottom: "8px" }}>
        {/* Replace with actual image */}
        <p style={{ textAlign: "center", paddingTop: "70px" }}>Book Cover</p>
      </div>
      <h3>{book.title}</h3>
      <p><i>{book.author}</i></p>
      <p>Rating: {book.rating} ★</p>
      <div className="book-actions">
        <button onClick={() => onAddToCart(book)}>Add to Cart</button>
        <button onClick={() => onAddToWishlist(book)}>Wishlist</button>
        <button onClick={() => onAddToBookmark(book)}>Bookmark</button>
      </div>
    </div>
  );
};

export default BookCard;

src/components/Dashboard/BookList.jsx
import React from "react";
import BookCard from "./BookCard";

const BookList = ({ books, onAddToCart, onAddToWishlist, onAddToBookmark }) => {
  return (
    <div className="book-list">
      {books.length === 0 && <p>No books found.</p>}
      {books.map(book => (
        <BookCard
          key={book.id}
          book={book}
          onAddToCart={onAddToCart}
          onAddToWishlist={onAddToWishlist}
          onAddToBookmark={onAddToBookmark}
        />
      ))}
    </div>
  );
};

export default BookList;

src/components/Dashboard/Dashboard.jsx
import React, { useState, useEffect } from "react";
import Sidebar from "./Sidebar";
import TopBar from "./TopBar";
import BookList from "./BookList";
import { fetchBooks } from "../../api/api";

const Dashboard = () => {
  const [selectedCategory, setSelectedCategory] = useState("free");
  const [books, setBooks] = useState([]);
  const [cart, setCart] = useState([]);
  const [wishlist, setWishlist] = useState([]);
  const [bookmarks, setBookmarks] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);

    if (selectedCategory === "free") {
      fetchBooks(null, true).then(data => {
        setBooks(data);
        setLoading(false);
      });
    } else if (selectedCategory === "topRated") {
      fetchBooks().then(data => {
        setBooks(data.filter(b => b.rating >= 4.5));
        setLoading(false);
      });
    } else {
      fetchBooks(selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)).then(data => {
        setBooks(data);
        setLoading(false);
      });
    }
  }, [selectedCategory]);

  const addToCart = (book) => {
    if (!cart.find(b => b.id === book.id)) setCart([...cart, book]);
  };

  const addToWishlist = (book) => {
    if (!wishlist.find(b => b.id === book.id)) setWishlist([...wishlist, book]);
  };

  const addToBookmark = (book) => {
    if (!bookmarks.find(b => b.id === book.id)) setBookmarks([...bookmarks, book]);
  };

  return (
    <div className="dashboard-container">
      <Sidebar selectedCategory={selectedCategory} setSelectedCategory={setSelectedCategory} />
      <main>
        <TopBar cartCount={cart.length} wishlistCount={wishlist.length} bookmarksCount={bookmarks.length} />
        <div style={{ padding: "1rem" }}>
          <h2>{selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)} Books</h2>
          {loading ? <p>Loading books...</p> : (
            <BookList books={books} onAddToCart={addToCart} onAddToWishlist={addToWishlist} onAddToBookmark={addToBookmark} />
          )}
        </div>
      </main>
    </div>
  );
};

export default Dashboard;

src/App.jsx
import React from "react";
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";

import { AuthProvider } from "./context/AuthContext";
import ProtectedRoute from "./components/ProtectedRoute";

import Home from "./components/Landing/Home";
import About from "./components/Landing/About";
import Contact from "./components/Landing/Contact";

import SignIn from "./components/Auth/SignIn";
import SignUp from "./components/Auth/SignUp";

import Dashboard from "./components/Dashboard/Dashboard";

const Navbar = () => (
  <nav className="navbar" style={{ display: "flex", justifyContent: "space-between", padding: "1rem", background: "#1f1f38", color: "white" }}>
    <Link to="/" style
